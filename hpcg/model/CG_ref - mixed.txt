byte loading operations
	4x load pointer
	1x load local_int_t
	1x call ComputeSPMV_ref<float>
	1x call ComputeWAXPBY_ref<float, float, double>
	1x call ComputeDotProduct_ref<double, double>(x dot x)
	1x call ComputeDotProduct_ref<double, float>(!x dot x)
	1x call CopyVector<float>

	loop iter-1 times
		1x call ComputeDotProduct_ref<double, float>(!x dot x)
		1x call ComputeWAXPBY_ref<float, float, float>

	loop iter times
		#if preconditioning
			1x call ComputeMG_ref<double>
		#else
			1x call ComputeWAXPBY_ref<double, double, float>
		#endif

		1x call ComputeWAXPBY_ref<float, float, float>
		1x call ComputeWAXPBY_ref<double, float, double>
		1x call ComputeSPMV_ref<float>
		1x call ComputeDotProduct_ref<float, float>(!x dot x)
		1x call ComputeDotProduct_ref<double, double)(x dot x)


bytes loaded (excluding counters and accumulators, assuming all pointers are the same size)
	4*sizeof(void*) + sizeof(local_int_t)
	+ bytesLoaded(ComputeSPMV_ref<float>)
	+ bytesLoaded(ComputeWAXPBY_ref<float, float, double>)
	+ bytesLoaded(ComputeDotProduct_ref<double, double>(x dot x))
	+ bytesLoaded(ComputeDotProduct_ref<double, float>(!x dot x))
	+ bytesLoaded(CopyVector<float>)
	+ (iter-1)
		*(bytesLoaded(ComputeDotProduct_ref<double, float>(!x dot x))
		+ bytesLoaded(ComputeWAXPBY_ref<float, float, float>))
	+ iter
		*((preconditioned
			?bytesLoaded(ComputeMG_ref<double>)
			:bytesLoaded(ComputeWAXPBY_ref<double, double, float>)
		+ bytesLoaded(ComputeWAXPBY_ref<float, float, float>)
		+ bytesLoaded(ComputeWAXPBY_ref<double, float, float>)
		+ bytesLoaded(ComputeSPMV_ref<float>)
		+ bytesLoaded(ComputeDotProduct_ref<float, float>(!x dot x)
		+ bytesLoaded(ComputeDotProduct_ref<double, double>(x dot x))


	calculated for actual setup (sizeof(void*) -> 8 bytes, sizeof(local_int_t) -> sizeof(int) -> 4 bytes)
		76 + 32*n + 12*nnz
		+ iter
			*(164 + 92*n + 12*nnz
			+ (preconditioned
				?{
					well cached:
						316 + 252*n + 268*(n_1 + n_2) + 104*n_3
							+ 68*(nnz + nnz_1 + nnz_2) + 24*nnz_3
					poorly cached:
						32*(nnz_0+nnz_1+nnz_2) + 16*nnz_3
				}:0)

		#if preconditioned:
			={
				well cached:
					76 + 32*n + 12*nnz
					+ iter
						*(480 + 344*n + 80*nnz
							+ 268*(n_1 + n_2) + 104*n_3
							+ 68*(nnz_1 + nnz_2) + 24*nnz_3
				poorly cached:
					iter*32*(nnz + nnz_1 + nnz_2) + 8*nnz_3
			}≈{
				well cached:
					iter*nnz*103.7903804
				poorly cached:
					iter*nnz*36.42768
			}≈ iter*nnz*{
				well cached: 103.7903804
				poorly cached: 36.42768
			}
		#else
			76 + 32*n + 12*nnz
			+ iter
				*(164 + 92*n + 12*nnz)

			≈76 + 8756/663*nnz
			+ iter*(164 + 10256/663*nnz)

			≈8756/663*nnz + iter*10256/663*nnz

			≈iter*nnz*15.46907994
		#end if
