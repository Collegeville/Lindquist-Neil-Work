operations
	3x access struct field
	2x load pointer
	1x load local_int_t

	loop nrow times:
		1x compare counter const
		1x incr counter
		3x access struct field
		4x index array
		2x load pointer
		1x load int
		1x store <datatype>
		1x store <datatype> to accumulator
		1x load <datatype from accumulator
		loop cur_nnz times:
			1x compare counter const
			1x incr counter
			1x mult
			1x add
			3x index array
			1x load local_int_t
			2x load <datatype>
			1x store <datatype> to accumulator
			1x load <datatype> from acculator
	
	
bytes loaded (excluding counters, assuming all pointers are the same size)
	2*sizeof(void*) + sizeof(local_int_t)
	+ nrow * (2*sizeof(void*) + sizeof(int))
	+ nnz * (sizeof(local_int_t)+2*sizeof(<datatype>))
	
	calculated for actual setup (sizeof(void*) -> 8 bytes, sizeof(local_int_t) -> sizeof(int) -> 4 bytes)
		20 + 20 * nrow + nnz * (4+2*sizeof(<datatype>))
		
		with 32 bit float
			20 + 20*nrow + 12*nnz
			≈ (12+10/13)*nnz
			≈ (166/13)*nnz
			≈ 12*nnz
		with 64 bit float
			20 + 20*nrow + 20*nnz
			= 20*(1+nrow+nnz)
			≈ 20*(27/26)*nnz
			≈ (270/13)*nnz
			≈ 20*nnz
			
		experimental - 28.65% decrease in overall time (06-26 9:53/10:06)
					 - 26.83% decrease in overall time (06-26 13:48/14:10)
		theoretical  - 38.51% decrease

bytes stored (excluding counters)
	nrow * sizeof(<datatype>)
	
	with 32 bit float
		4 * nrow
	with 64 bit float
		8 * nrow
		
	experimental - 28.65% decrease in overall time (9:53/10:06)
				 - 26.83% decrease in overall time (13:48/14:10)
	theoretical  - 50% decrease
	

solve for proportions	
	lS ≈ .6149*lD  #load time
	sS = .5*sD     #store time
	mS = mD		   #miscellanious time
	lS + sS + mS ≈ .74*(lD+sD+mD)
	
	0 < lS < 1
	0 < lD < 1
	0 < sS < 1
	0 < sD < 1
	0 < mS < 1
	0 < mD < 1
	
	.6149*lD + .5*sD + mD ≈ .74*lD+.74*sD +.74*mD
	-.1251*lD + .24*sD + .26*mD ≈ 0
	


